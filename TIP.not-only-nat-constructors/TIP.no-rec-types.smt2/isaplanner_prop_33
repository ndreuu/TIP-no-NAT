(set-logic HORN)
(define-fun Z_107 () Int 0)
(define-fun S_37 ((x Int)) Int (+ x 1))
(declare-datatypes ((Bool_20 0)) (((false_20) (true_20))))
(declare-fun diseqBool_6 (Bool_20 Bool_20) Bool)
(declare-fun isfalse_6 (Bool_20) Bool)
(declare-fun istrue_6 (Bool_20) Bool)
(assert (isfalse_6 false_20))
(assert (istrue_6 true_20))
(assert (diseqBool_6 false_20 true_20))
(assert (diseqBool_6 true_20 false_20))
(declare-fun and_20 (Bool_20 Bool_20 Bool_20) Bool)
(declare-fun or_20 (Bool_20 Bool_20 Bool_20) Bool)
(declare-fun hence_20 (Bool_20 Bool_20 Bool_20) Bool)
(declare-fun not_20 (Bool_20 Bool_20) Bool)
(assert (and_20 false_20 false_20 false_20))
(assert (and_20 false_20 true_20 false_20))
(assert (and_20 false_20 false_20 true_20))
(assert (and_20 true_20 true_20 true_20))
(assert (or_20 false_20 false_20 false_20))
(assert (or_20 true_20 true_20 false_20))
(assert (or_20 true_20 false_20 true_20))
(assert (or_20 true_20 true_20 true_20))
(assert (hence_20 true_20 false_20 false_20))
(assert (hence_20 false_20 true_20 false_20))
(assert (hence_20 true_20 false_20 true_20))
(assert (hence_20 true_20 true_20 true_20))
(assert (not_20 true_20 false_20))
(assert (not_20 false_20 true_20))
(declare-fun projS_35 (Int Int) Bool)
(declare-fun isZ_37 (Int) Bool)
(declare-fun isS_37 (Int) Bool)
(assert (forall ((x_1169 Int))
	(projS_35 x_1169 (S_37 x_1169))))
(assert (isZ_37 Z_107))
(assert (forall ((x_1171 Int))
	(isS_37 (S_37 x_1171))))
(declare-fun min_1 (Int Int Int) Bool)
(assert (forall ((x_1150 Int) (y_85 Int) (z_108 Int))
	(=> (min_1 x_1150 z_108 y_85) (min_1 (S_37 x_1150) (S_37 z_108) (S_37 y_85)))))
(assert (forall ((z_108 Int))
	(min_1 Z_107 (S_37 z_108) Z_107)))
(assert (forall ((y_84 Int))
	(min_1 Z_107 Z_107 y_84)))
(declare-fun x_1143 (Bool_20 Int Int) Bool)
(assert (forall ((x Int) (y Int))
	(=> (distinct x y) (x_1143 false_20 x y))))
(assert (forall ((x Int) (y Int))
	(=> (= x y) (x_1143 true_20 x y))))
(declare-fun x_1146 (Bool_20 Int Int) Bool)
(assert (forall ((x_1158 Bool_20) (x_1148 Int) (z_110 Int))
	(=> (x_1146 x_1158 z_110 x_1148) (x_1146 x_1158 (S_37 z_110) (S_37 x_1148)))))
(assert (forall ((z_110 Int))
	(x_1146 false_20 (S_37 z_110) Z_107)))
(assert (forall ((y_88 Int))
	(x_1146 true_20 Z_107 y_88)))
(assert (forall ((x_1162 Int) (x_1163 Bool_20) (x_1164 Bool_20) (a_2 Int) (b_2 Int))
	(=> (and true (diseqBool_6 x_1163 x_1164) (min_1 x_1162 a_2 b_2) (x_1143 x_1163 x_1162 a_2) (x_1146 x_1164 a_2 b_2)) false)))
(check-sat)
