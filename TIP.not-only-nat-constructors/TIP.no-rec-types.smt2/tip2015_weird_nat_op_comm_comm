(set-logic HORN)
(define-fun zero_4 () Int 0)
(define-fun succ_4 ((x Int)) Int (+ x 1))
(declare-fun p_9 (Int Int) Bool)
(declare-fun iszero_4 (Int) Bool)
(declare-fun issucc_4 (Int) Bool)
(assert (forall ((x_4495 Int))
	(p_9 x_4495 (succ_4 x_4495))))
(assert (iszero_4 zero_4))
(assert (forall ((x_4497 Int))
	(issucc_4 (succ_4 x_4497))))
(declare-fun op_0 (Int Int Int Int Int) Bool)
(assert (forall ((x_4486 Int) (x_4484 Int) (x_4482 Int) (y_373 Int) (x_4483 Int))
	(=> (op_0 x_4486 x_4482 y_373 x_4484 (succ_4 x_4483)) (op_0 x_4486 x_4482 y_373 (succ_4 x_4484) x_4483))))
(assert (forall ((x_4488 Int) (x_4485 Int) (y_373 Int) (x_4483 Int))
	(=> (op_0 x_4488 x_4485 y_373 y_373 x_4483) (op_0 x_4488 (succ_4 x_4485) y_373 zero_4 x_4483))))
(assert (forall ((y_373 Int) (x_4483 Int))
	(op_0 x_4483 zero_4 y_373 zero_4 x_4483)))
(assert (forall ((x_4491 Int) (x_4492 Int) (a_9 Int) (b_8 Int) (c_2 Int) (d_0 Int))
	(=> (and true (distinct x_4491 x_4492) (op_0 x_4491 a_9 b_8 c_2 d_0) (op_0 x_4492 b_8 a_9 d_0 c_2)) false)))
(check-sat)
