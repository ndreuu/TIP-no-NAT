(set-logic HORN)
(define-fun zero_72 () Int 0)
(define-fun succ_70 ((x Int)) Int (+ x 1))
(declare-fun p_194 (Int Int) Bool)
(declare-fun iszero_70 (Int) Bool)
(declare-fun issucc_70 (Int) Bool)
(assert (forall ((x_28604 Int))
	(p_194 x_28604 (succ_70 x_28604))))
(assert (iszero_70 zero_72))
(assert (forall ((x_28606 Int))
	(issucc_70 (succ_70 x_28606))))
(declare-fun addacc_9 (Int Int Int Int) Bool)
(assert (forall ((x_28595 Int) (x_28592 Int) (y_1196 Int) (z_1129 Int))
	(=> (addacc_9 x_28595 x_28592 (succ_70 y_1196) z_1129) (addacc_9 x_28595 (succ_70 x_28592) y_1196 z_1129))))
(assert (forall ((x_28597 Int) (x_28593 Int) (z_1129 Int))
	(=> (addacc_9 x_28597 zero_72 x_28593 (succ_70 z_1129)) (addacc_9 x_28597 zero_72 (succ_70 x_28593) z_1129))))
(assert (forall ((x_28599 Int))
	(addacc_9 x_28599 zero_72 zero_72 x_28599)))
(assert (forall ((x_28600 Int) (x_28601 Int) (x_28594 Int) (y_1197 Int) (z_1130 Int))
	(=> (and true (distinct x_28600 x_28601) (addacc_9 x_28600 x_28594 y_1197 z_1130) (addacc_9 x_28601 y_1197 x_28594 z_1130)) false)))
(check-sat)
