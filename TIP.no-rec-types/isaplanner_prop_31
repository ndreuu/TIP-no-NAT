
(set-logic HORN)
(define-fun Z_49 () Int 0)
(define-fun S_17 ((x Int)) Int (+ x 1))
(declare-fun projS_17 (Int Int) Bool)
(declare-fun isZ_17 (Int) Bool)
(declare-fun isS_17 (Int) Bool)
(assert (forall ((x_530 Int))
	(projS_17 x_530 (S_17 x_530))))
(assert (isZ_17 Z_49))
(assert (forall ((x_532 Int))
	(isS_17 (S_17 x_532))))
(declare-fun min_0 (Int Int Int) Bool)
(assert (forall ((x_521 Int) (y_42 Int) (z_50 Int))
	(=> (min_0 x_521 z_50 y_42) (min_0 (S_17 x_521) (S_17 z_50) (S_17 y_42)))))
(assert (forall ((z_50 Int))
	(min_0 Z_49 (S_17 z_50) Z_49)))
(assert (forall ((y_41 Int))
	(min_0 Z_49 Z_49 y_41)))
(assert (forall ((x_524 Int) (x_525 Int) (x_526 Int) (x_527 Int) (a_0 Int) (b_0 Int) (c_0 Int))
	(=> (and true (distinct x_525 x_527) (min_0 x_524 a_0 b_0) (min_0 x_525 x_524 c_0) (min_0 x_526 b_0 c_0) (min_0 x_527 a_0 x_526)) false)))
(check-sat)