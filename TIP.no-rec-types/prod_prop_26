
(set-logic HORN)
(define-fun Z_2024 () Int 0)
(define-fun S_460 ((x Int)) Int (+ x 1))
(declare-fun projS_183 (Int Int) Bool)
(declare-fun isZ_427 (Int) Bool)
(declare-fun isS_427 (Int) Bool)
(assert (forall ((x_55094 Int))
	(projS_183 x_55094 (S_460 x_55094))))
(assert (isZ_427 Z_2024))
(assert (forall ((x_55096 Int))
	(isS_427 (S_460 x_55096))))
(declare-fun half_1 (Int Int) Bool)
(assert (forall ((x_55082 Int) (z_2025 Int))
	(=> (half_1 x_55082 z_2025) (half_1 (S_460 x_55082) (S_460 (S_460 z_2025))))))
(assert (half_1 Z_2024 (S_460 Z_2024)))
(assert (half_1 Z_2024 Z_2024))
(declare-fun x_55078 (Int Int Int) Bool)
(assert (forall ((x_55086 Int) (z_2026 Int) (y_2259 Int))
	(=> (x_55078 x_55086 z_2026 y_2259) (x_55078 (S_460 x_55086) (S_460 z_2026) y_2259))))
(assert (forall ((x_55087 Int))
	(x_55078 x_55087 Z_2024 x_55087)))
(assert (forall ((x_55088 Int) (x_55089 Int) (x_55090 Int) (x_55091 Int) (x_55080 Int) (y_2260 Int))
	(=> (and true (distinct x_55089 x_55091) (x_55078 x_55088 x_55080 y_2260) (half_1 x_55089 x_55088) (x_55078 x_55090 y_2260 x_55080) (half_1 x_55091 x_55090)) false)))
(check-sat)