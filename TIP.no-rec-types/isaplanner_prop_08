
(set-logic HORN)
(define-fun Z_164 () Int 0)
(define-fun S_57 ((x Int)) Int (+ x 1))
(declare-fun projS_55 (Int Int) Bool)
(declare-fun isZ_57 (Int) Bool)
(declare-fun isS_57 (Int) Bool)
(assert (forall ((x_1665 Int))
	(projS_55 x_1665 (S_57 x_1665))))
(assert (isZ_57 Z_164))
(assert (forall ((x_1667 Int))
	(isS_57 (S_57 x_1667))))
(declare-fun x_1647 (Int Int Int) Bool)
(assert (forall ((x_1652 Int) (x_1649 Int) (z_165 Int))
	(=> (x_1647 x_1652 z_165 x_1649) (x_1647 x_1652 (S_57 z_165) (S_57 x_1649)))))
(assert (forall ((z_165 Int))
	(x_1647 (S_57 z_165) (S_57 z_165) Z_164)))
(assert (forall ((y_131 Int))
	(x_1647 Z_164 Z_164 y_131)))
(declare-fun x_1650 (Int Int Int) Bool)
(assert (forall ((x_1657 Int) (z_166 Int) (y_132 Int))
	(=> (x_1650 x_1657 z_166 y_132) (x_1650 (S_57 x_1657) (S_57 z_166) y_132))))
(assert (forall ((x_1658 Int))
	(x_1650 x_1658 Z_164 x_1658)))
(assert (forall ((x_1659 Int) (x_1660 Int) (x_1661 Int) (x_1662 Int) (k_1 Int) (m_3 Int) (n_13 Int))
	(=> (and true (distinct x_1661 x_1662) (x_1650 x_1659 k_1 m_3) (x_1650 x_1660 k_1 n_13) (x_1647 x_1661 x_1659 x_1660) (x_1647 x_1662 m_3 n_13)) false)))
(check-sat)