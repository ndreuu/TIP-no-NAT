
(set-logic HORN)
(define-fun Z_81 () Int 0)
(define-fun S_29 ((x Int)) Int (+ x 1))
(declare-fun projS_29 (Int Int) Bool)
(declare-fun isZ_29 (Int) Bool)
(declare-fun isS_29 (Int) Bool)
(assert (forall ((x_870 Int))
	(projS_29 x_870 (S_29 x_870))))
(assert (isZ_29 Z_81))
(assert (forall ((x_872 Int))
	(isS_29 (S_29 x_872))))
(declare-fun x_854 (Int Int Int) Bool)
(assert (forall ((x_859 Int) (x_856 Int) (z_82 Int))
	(=> (x_854 x_859 z_82 x_856) (x_854 x_859 (S_29 z_82) (S_29 x_856)))))
(assert (forall ((z_82 Int))
	(x_854 (S_29 z_82) (S_29 z_82) Z_81)))
(assert (forall ((y_65 Int))
	(x_854 Z_81 Z_81 y_65)))
(declare-fun x_857 (Int Int Int) Bool)
(assert (forall ((x_864 Int) (z_83 Int) (y_66 Int))
	(=> (x_857 x_864 z_83 y_66) (x_857 (S_29 x_864) (S_29 z_83) y_66))))
(assert (forall ((x_865 Int))
	(x_857 x_865 Z_81 x_865)))
(assert (forall ((x_866 Int) (x_867 Int) (n_7 Int) (m_2 Int))
	(=> (and true (distinct x_867 Z_81) (x_857 x_866 n_7 m_2) (x_854 x_867 n_7 x_866)) false)))
(check-sat)