
(set-logic HORN)
(define-fun Z_371 () Int 0)
(define-fun S_131 ((x Int)) Int (+ x 1))
(declare-fun projS_127 (Int Int) Bool)
(declare-fun isZ_131 (Int) Bool)
(declare-fun isS_131 (Int) Bool)
(assert (forall ((x_3625 Int))
	(projS_127 x_3625 (S_131 x_3625))))
(assert (isZ_131 Z_371))
(assert (forall ((x_3627 Int))
	(isS_131 (S_131 x_3627))))
(declare-fun x_3609 (Int Int Int) Bool)
(assert (forall ((x_3614 Int) (x_3611 Int) (z_372 Int))
	(=> (x_3609 x_3614 z_372 x_3611) (x_3609 x_3614 (S_131 z_372) (S_131 x_3611)))))
(assert (forall ((z_372 Int))
	(x_3609 (S_131 z_372) (S_131 z_372) Z_371)))
(assert (forall ((y_294 Int))
	(x_3609 Z_371 Z_371 y_294)))
(declare-fun x_3612 (Int Int Int) Bool)
(assert (forall ((x_3619 Int) (z_373 Int) (y_295 Int))
	(=> (x_3612 x_3619 z_373 y_295) (x_3612 (S_131 x_3619) (S_131 z_373) y_295))))
(assert (forall ((x_3620 Int))
	(x_3612 x_3620 Z_371 x_3620)))
(assert (forall ((x_3621 Int) (x_3622 Int) (n_26 Int) (m_13 Int))
	(=> (and true (distinct x_3622 m_13) (x_3612 x_3621 n_26 m_13) (x_3609 x_3622 x_3621 n_26)) false)))
(check-sat)