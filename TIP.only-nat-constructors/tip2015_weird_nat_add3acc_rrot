
(set-logic HORN)
(define-fun zero_16 () Int 0)
(define-fun succ_16 ((x Int)) Int (+ x 1))
(declare-fun p_45 (Int Int) Bool)
(declare-fun iszero_16 (Int) Bool)
(declare-fun issucc_16 (Int) Bool)
(assert (forall ((x_12170 Int))
	(p_45 x_12170 (succ_16 x_12170))))
(assert (iszero_16 zero_16))
(assert (forall ((x_12172 Int))
	(issucc_16 (succ_16 x_12172))))
(assert (forall ((x_12173 Int))
	(distinct zero_16 (succ_16 x_12173))))
(assert (forall ((x_12174 Int))
	(distinct (succ_16 x_12174) zero_16)))
(assert (forall ((x_12175 Int) (x_12176 Int))
	(=> (distinct x_12175 x_12176) (distinct (succ_16 x_12175) (succ_16 x_12176)))))
(declare-fun addacc_2 (Int Int Int Int) Bool)
(assert (forall ((x_12161 Int) (x_12158 Int) (y_502 Int) (z_559 Int))
	(=> (addacc_2 x_12161 x_12158 (succ_16 y_502) z_559) (addacc_2 x_12161 (succ_16 x_12158) y_502 z_559))))
(assert (forall ((x_12163 Int) (x_12159 Int) (z_559 Int))
	(=> (addacc_2 x_12163 zero_16 x_12159 (succ_16 z_559)) (addacc_2 x_12163 zero_16 (succ_16 x_12159) z_559))))
(assert (forall ((x_12165 Int))
	(addacc_2 x_12165 zero_16 zero_16 x_12165)))
(assert (forall ((x_12166 Int) (x_12167 Int) (x_12160 Int) (y_503 Int) (z_560 Int))
	(=> (and true (distinct x_12166 x_12167) (addacc_2 x_12166 x_12160 y_503 z_560) (addacc_2 x_12167 z_560 x_12160 y_503)) false)))
(check-sat)