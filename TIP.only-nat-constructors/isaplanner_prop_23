
(set-logic HORN)
(define-fun Z_137 () Int 0)
(define-fun S_47 ((x Int)) Int (+ x 1))
(declare-fun projS_45 (Int Int) Bool)
(declare-fun isZ_47 (Int) Bool)
(declare-fun isS_47 (Int) Bool)
(assert (forall ((x_1433 Int))
	(projS_45 x_1433 (S_47 x_1433))))
(assert (isZ_47 Z_137))
(assert (forall ((x_1435 Int))
	(isS_47 (S_47 x_1435))))
(assert (forall ((x_1436 Int))
	(distinct Z_137 (S_47 x_1436))))
(assert (forall ((x_1437 Int))
	(distinct (S_47 x_1437) Z_137)))
(assert (forall ((x_1438 Int) (x_1439 Int))
	(=> (distinct x_1438 x_1439) (distinct (S_47 x_1438) (S_47 x_1439)))))
(declare-fun max_1 (Int Int Int) Bool)
(assert (forall ((x_1426 Int) (x_1424 Int) (z_138 Int))
	(=> (max_1 x_1426 z_138 x_1424) (max_1 (S_47 x_1426) (S_47 z_138) (S_47 x_1424)))))
(assert (forall ((z_138 Int))
	(max_1 (S_47 z_138) (S_47 z_138) Z_137)))
(assert (forall ((x_1428 Int))
	(max_1 x_1428 Z_137 x_1428)))
(assert (forall ((x_1429 Int) (x_1430 Int) (a_3 Int) (b_3 Int))
	(=> (and true (distinct x_1429 x_1430) (max_1 x_1429 a_3 b_3) (max_1 x_1430 b_3 a_3)) false)))
(check-sat)