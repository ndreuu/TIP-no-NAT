
(set-logic HORN)
(define-fun zero_60 () Int 0)
(define-fun succ_59 ((x Int)) Int (+ x 1))
(declare-fun p_165 (Int Int) Bool)
(declare-fun iszero_59 (Int) Bool)
(declare-fun issucc_59 (Int) Bool)
(assert (forall ((x_26738 Int))
	(p_165 x_26738 (succ_59 x_26738))))
(assert (iszero_59 zero_60))
(assert (forall ((x_26740 Int))
	(issucc_59 (succ_59 x_26740))))
(assert (forall ((x_26741 Int))
	(distinct zero_60 (succ_59 x_26741))))
(assert (forall ((x_26742 Int))
	(distinct (succ_59 x_26742) zero_60)))
(assert (forall ((x_26743 Int) (x_26744 Int))
	(=> (distinct x_26743 x_26744) (distinct (succ_59 x_26743) (succ_59 x_26744)))))
(declare-fun op_2 (Int Int Int Int Int) Bool)
(assert (forall ((x_26727 Int) (x_26724 Int) (x_26722 Int) (y_1065 Int) (x_26723 Int))
	(=> (op_2 x_26727 x_26722 y_1065 x_26724 (succ_59 x_26723)) (op_2 x_26727 x_26722 y_1065 (succ_59 x_26724) x_26723))))
(assert (forall ((x_26729 Int) (x_26725 Int) (y_1065 Int) (x_26723 Int))
	(=> (op_2 x_26729 x_26725 y_1065 y_1065 x_26723) (op_2 x_26729 (succ_59 x_26725) y_1065 zero_60 x_26723))))
(assert (forall ((y_1065 Int) (x_26723 Int))
	(op_2 x_26723 zero_60 y_1065 zero_60 x_26723)))
(assert (forall ((x_26732 Int) (x_26733 Int) (x_26734 Int) (x_26735 Int) (x_26726 Int) (a_31 Int) (b_22 Int) (c_11 Int) (d_3 Int))
	(=> (and true (distinct x_26733 x_26735) (op_2 x_26732 x_26726 a_31 a_31 a_31) (op_2 x_26733 x_26732 b_22 c_11 d_3) (op_2 x_26734 b_22 x_26726 b_22 b_22) (op_2 x_26735 a_31 x_26734 c_11 d_3)) false)))
(check-sat)