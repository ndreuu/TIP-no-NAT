
(set-logic HORN)
(define-fun zero_0 () Int 0)
(define-fun succ_0 ((x Int)) Int (+ x 1))
(declare-fun p_1 (Int Int) Bool)
(declare-fun iszero_0 (Int) Bool)
(declare-fun issucc_0 (Int) Bool)
(assert (forall ((x_4091 Int))
	(p_1 x_4091 (succ_0 x_4091))))
(assert (iszero_0 zero_0))
(assert (forall ((x_4093 Int))
	(issucc_0 (succ_0 x_4093))))
(assert (forall ((x_4094 Int))
	(distinct zero_0 (succ_0 x_4094))))
(assert (forall ((x_4095 Int))
	(distinct (succ_0 x_4095) zero_0)))
(assert (forall ((x_4096 Int) (x_4097 Int))
	(=> (distinct x_4096 x_4097) (distinct (succ_0 x_4096) (succ_0 x_4097)))))
(declare-fun accplus_0 (Int Int Int) Bool)
(assert (forall ((x_4082 Int) (z_423 Int) (y_334 Int))
	(=> (accplus_0 x_4082 z_423 (succ_0 y_334)) (accplus_0 x_4082 (succ_0 z_423) y_334))))
(assert (forall ((x_4084 Int))
	(accplus_0 x_4084 zero_0 x_4084)))
(assert (forall ((x_4085 Int) (x_4086 Int) (x_4087 Int) (x_4088 Int) (x_4081 Int) (y_335 Int) (z_424 Int))
	(=> (and true (distinct x_4086 x_4088) (accplus_0 x_4085 y_335 z_424) (accplus_0 x_4086 x_4081 x_4085) (accplus_0 x_4087 x_4081 y_335) (accplus_0 x_4088 x_4087 z_424)) false)))
(check-sat)