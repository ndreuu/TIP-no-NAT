
(set-logic HORN)
(define-fun zero_87 () Int 0)
(define-fun succ_85 ((x Int)) Int (+ x 1))
(declare-fun p_241 (Int Int) Bool)
(declare-fun iszero_85 (Int) Bool)
(declare-fun issucc_85 (Int) Bool)
(assert (forall ((x_34815 Int))
	(p_241 x_34815 (succ_85 x_34815))))
(assert (iszero_85 zero_87))
(assert (forall ((x_34817 Int))
	(issucc_85 (succ_85 x_34817))))
(declare-fun addacc_10 (Int Int Int Int) Bool)
(assert (forall ((x_34806 Int) (x_34803 Int) (y_1396 Int) (z_1292 Int))
	(=> (addacc_10 x_34806 x_34803 (succ_85 y_1396) z_1292) (addacc_10 x_34806 (succ_85 x_34803) y_1396 z_1292))))
(assert (forall ((x_34808 Int) (x_34804 Int) (z_1292 Int))
	(=> (addacc_10 x_34808 zero_87 x_34804 (succ_85 z_1292)) (addacc_10 x_34808 zero_87 (succ_85 x_34804) z_1292))))
(assert (forall ((x_34810 Int))
	(addacc_10 x_34810 zero_87 zero_87 x_34810)))
(assert (forall ((x_34811 Int) (x_34812 Int) (x_34805 Int) (y_1397 Int) (z_1293 Int))
	(=> (and true (distinct x_34811 x_34812) (addacc_10 x_34811 x_34805 y_1397 z_1293) (addacc_10 x_34812 z_1293 y_1397 x_34805)) false)))
(check-sat)